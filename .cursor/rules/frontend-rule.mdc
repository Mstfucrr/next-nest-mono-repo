---
globs: apps/web/**/*.ts,apps/web/**/*.tsx,apps/web/**/*.json,apps/web/**/*.css,apps/web/**/*.md
alwaysApply: false
---

<!--
Glob: apps/web/**/*.{ts,tsx,js,jsx,json,css,md}
-->

# 🎨 FRONTEND (WEB) RULES

## ��️ Proje Yapısı

```bash
apps/web/src/
src/
├── app/                  # Sayfa yönlendirmeleri, route grupları ve UI bileşenlerinin render edildiği ana klasör.
├── components/           # Tekrar kullanılabilir genel bileşenler.
├── hooks/                # Tekrar kullanılabilir global hooklar.
├── services/             # API çağrıları için global servis dosyaları.
├── utils/                # Proje içinde tekrar kullanılabilir, saf (pure) yardımcı fonksiyonlar. Örneğin, tarih formatlama, metin dönüştürme gibi bağımsız işlemler.
├── lib/                  # Harici kütüphaneler, özel yapılandırmalar ve proje genelinde kullanılan genişletilmiş utility fonksiyonları. Örneğin, API isteği, `cn` gibi class yönetim fonksiyonları, auth işlemleri vb.
├── __test__/             # Test dosyalarının konulduğu klasör. (opsiyonel)
├── modules/              # Modüler yapı.
│   ├── module1/
│   │   ├── hooks/        # Modüle1'e özel hooklar.
│   │   ├── components/   # Modüle1'e özel bileşenler.
│   │   ├── utils/        # Modüle1'e özel yardımcı araçlar.
│   │   ├── services/     # Modüle1'e özel API servisleri.
│   │   ├── views/        # Modüle1'e özel sayfalar.
│   ├── module2/
│   └── ... module_n/
public/
├── images/               # İhtiyaç halinde kullanılacak resimler.
└── icons/                # İhtiyaç halinde kullanılacak ikonlar.
```

## 🎯 Component Kuralları

### Component Yapısı

```tsx
// ✅ Doğru
interface UserCardProps {
  user: User
  onEdit?: (user: User) => void
  className?: string
}

export function UserCard({ user, onEdit, className }: UserCardProps) {
  return (
    <div className={cn('user-card', className)}>
      <h3>{user.name}</h3>
      <p>{user.email}</p>
      {onEdit && (
        <button onClick={() => onEdit(user)}>
          Edit
        </button>
      )}
    </div>
  )
}

// ❌ Yanlış
export default function UserCard(props: any) {
  return <div>{props.user.name}</div>
}
```

### Component Naming

```typescript
// ✅ Doğru
UserProfile.tsx
ProductCard.tsx
NavigationMenu.tsx
useAuth.ts
useApi.ts
// service ve store için ✅ Doğru
user.service.ts
user.store.ts

// ❌ Yanlış
userProfile.tsx
product-card.tsx
nav.tsx
useauth.ts
```


### cn Kullanımı


Aşağıya `cn` kullanımı için **Frontend (WEB) Rules** dokümanına eklenebilecek kuralları, örneklerle birlikte kısa ve net şekilde hazırladım:

---

## 🎨 Styling Kuralları

### ✅ **`cn` (classNames) Kullanımı**

Tailwind CSS ile `className` tanımlarında koşullu sınıfları daha okunabilir hale getirmek için `cn` (genellikle `clsx` veya `classnames` türevi) kullanılmalıdır. `lib/utils.ts` içinde tanımlı olan `cn` fonksiyonu şu şekilde kullanılmalıdır:

#### 📌 Doğru Kullanım

```tsx
<div
  className={cn(
    'mb-2',
    {
      'text-red-500': hasError,
      'text-green-500': !hasError
    }
  )}
>
  Email
</div>
```

```tsx
// opsiyonel className prop'u olan bir bileşende
export function Button({ className }: { className?: string }) {
  return (
    <button
      className={cn('px-4 py-2 rounded', className)}
    >
      Gönder
    </button>
  )
}
```

#### 🚫 Yanlış Kullanım

```tsx
// koşulsuz string birleştirme
className={`px-4 py-2 rounded ${isError ? 'text-red-500' : ''}`}

// gereksiz string concat
className={'text-lg' + (active ? ' font-bold' : '')}

// className'e doğrudan `clsx` yazmak
import clsx from 'clsx'
className={clsx('a', { b: true })} // ❌ cn kullanılmalı
```

---

### ✅ Kurallar Özeti

* `className` içinde koşullu stil uygulanacaksa `cn()` kullanılmalı.
* `cn()` içinde sabit sınıflar string olarak, koşullu sınıflar `{ 'class-name': condition }` şeklinde yazılmalı.
* `clsx` ya da `classnames` doğrudan kullanılmamalı, bunun yerine proje genelinde tanımlı `cn()` fonksiyonu tercih edilmelidir.

### Props Interface

```typescript
// ✅ Doğru
interface ButtonProps {
  children: React.ReactNode
  variant?: 'primary' | 'secondary' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  onClick?: () => void
  className?: string
}

// ❌ Yanlış
interface ButtonProps {
  children: any
  variant: string
  onClick: any
}
```

## 🎨 Styling Kuralları

### Tailwind CSS Kullanımı

```tsx
// ✅ Doğru
<div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-md">
  <h2 className="text-xl font-semibold text-gray-900">
    User Profile
  </h2>
  <button className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
    Edit
  </button>
</div>

// ❌ Yanlış
<div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-md text-xl font-semibold text-gray-900">
  User Profile
</div>
```

### CSS Module Kullanımı (Gerekirse)

```tsx
// ✅ Doğru
import styles from './UserCard.module.css'

export const UserCard = () => {
  return (
    <div className={styles.card}>
      <h3 className={styles.title}>User Name</h3>
    </div>
  )
}
```

### Responsive Design

```tsx
// ✅ Doğru
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  <div className="p-4 bg-white rounded-lg">
    Content
  </div>
</div>

// ❌ Yanlış
<div className="grid grid-cols-3 gap-4">
  <div className="p-4 bg-white rounded-lg">
    Content
  </div>
</div>
```

## 🔗 State Management

### Local State (useState)

```typescript
// ✅ Doğru
const [isLoading, setIsLoading] = useState(false)
const [user, setUser] = useState<User | null>(null)
const [error, setError] = useState<string | null>(null)

// ❌ Yanlış
const [state, setState] = useState({
  isLoading: false,
  user: null,
  error: null
})
```

### Custom Hooks

```typescript
// ✅ Doğru
export function useAuth() {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  async function login(credentials: LoginCredentials) {
    try {
      setIsLoading(true)
      const response = await authService.login(credentials)
      setUser(response.user)
    } catch (error) {
      throw error
    } finally {
      setIsLoading(false)
    }
  }

  return { user, isLoading, login }
}

// ❌ Yanlış
export const useAuth = () => {
  return {
    user: null,
    login: () => {}
  }
}
```

## 🌐 API Integration

### Service Functions

```typescript
// ✅ Doğru
export const userService = {
  async getUsers(): Promise<User[]> {
    const response = await fetch('/api/users')
    if (!response.ok) {
      throw new Error('Failed to fetch users')
    }
    return response.json()
  },

  async createUser(userData: CreateUserData): Promise<User> {
    const response = await fetch('/api/users', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(userData)
    })
    if (!response.ok) {
      throw new Error('Failed to create user')
    }
    return response.json()
  }
}

// ❌ Yanlış
export const userService = {
  getUsers: () => fetch('/api/users').then(res => res.json()),
  createUser: (data: any) => fetch('/api/users', {
    method: 'POST',
    body: JSON.stringify(data)
  }).then(res => res.json())
}
```

### Error Handling

```typescript
// ✅ Doğru
const [users, setUsers] = useState<User[]>([])
const [error, setError] = useState<string | null>(null)
const [isLoading, setIsLoading] = useState(false)

const fetchUsers = async () => {
  try {
    setIsLoading(true)
    setError(null)
    const data = await userService.getUsers()
    setUsers(data)
  } catch (err) {
    setError(err instanceof Error ? err.message : 'An error occurred')
  } finally {
    setIsLoading(false)
  }
}

// ❌ Yanlış
const fetchUsers = async () => {
  const data = await userService.getUsers()
  setUsers(data)
}
```

## 📝 Form Handling

### React Hook Form

```typescript
// ✅ Doğru
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const userSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  age: z.number().min(18, 'Must be at least 18 years old')
})

type UserFormData = z.infer<typeof userSchema>

export const UserForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting }
  } = useForm<UserFormData>({
    resolver: zodResolver(userSchema)
  })

  const onSubmit = async (data: UserFormData) => {
    try {
      await userService.createUser(data)
    } catch (error) {
      console.error('Failed to create user:', error)
    }
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input {...register('name')} />
      {errors.name && <span>{errors.name.message}</span>}
      
      <input {...register('email')} />
      {errors.email && <span>{errors.email.message}</span>}
      
      <button type="submit" disabled={isSubmitting}>
        {isSubmitting ? 'Creating...' : 'Create User'}
      </button>
    </form>
  )
}

// ❌ Yanlış
export const UserForm = () => {
  const [name, setName] = useState('')
  const [email, setEmail] = useState('')

  const handleSubmit = (e: any) => {
    e.preventDefault()
    // Validation logic here
  }

  return (
    <form onSubmit={handleSubmit}>
      <input value={name} onChange={(e) => setName(e.target.value)} />
      <input value={email} onChange={(e) => setEmail(e.target.value)} />
      <button type="submit">Submit</button>
    </form>
  )
}
```

## 🔒 Authentication & Authorization

### Protected Routes

```tsx
// ✅ Doğru
export const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({
  children
}) => {
  const { user, isLoading } = useAuth()

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (!user) {
    return <Navigate to="/login" replace />
  }

  return <>{children}</>
}

// ❌ Yanlış
export const ProtectedRoute = ({ children }: any) => {
  const user = localStorage.getItem('user')
  return user ? children : <div>Not authorized</div>
}
```

### Authorization HOC

```tsx
type Role = 'user' | 'seller' | 'admin' | 'godlike'

interface WithAuthorizationOptions {
  requiredRoles?: Role[]
  redirectTo?: string
}

export function withAuthorization<P extends object>(
  Component: React.ComponentType<P>,
  options?: WithAuthorizationOptions
): React.FC<P> {
  const { requiredRoles = [], redirectTo = '/login' } = options || {}

  return function AuthorizedComponent(props: P) {
    const { user, isLoading } = useAuth()
    const router = useRouter()

    useEffect(() => {
      if (!isLoading && (!user || (requiredRoles.length && !requiredRoles.includes(user.role)))) {
        router.replace(redirectTo)
      }
    }, [isLoading, user, requiredRoles, router, redirectTo])

    if (isLoading || !user) return <div className='p-4'>Yükleniyor...</div>
    if (requiredRoles.length && !requiredRoles.includes(user.role)) return null

    return <Component {...props} />
  }
}
```

## 🧪 Testing

### Component Testing

```typescript
// ✅ Doğru
import { render, screen, fireEvent } from '@testing-library/react'
import { UserCard } from './UserCard'

describe('UserCard', () => {
  const mockUser = {
    id: 1,
    name: 'John Doe',
    email: 'john@example.com'
  }

  it('renders user information correctly', () => {
    render(<UserCard user={mockUser} />)
    
    expect(screen.getByText('John Doe')).toBeInTheDocument()
    expect(screen.getByText('john@example.com')).toBeInTheDocument()
  })

  it('calls onEdit when edit button is clicked', () => {
    const mockOnEdit = jest.fn()
    render(<UserCard user={mockUser} onEdit={mockOnEdit} />)
    
    fireEvent.click(screen.getByText('Edit'))
    expect(mockOnEdit).toHaveBeenCalledWith(mockUser)
  })
})

// ❌ Yanlış
describe('UserCard', () => {
  it('works', () => {
    render(<UserCard />)
    expect(true).toBe(true)
  })
})
```

### Hook Testing

```typescript
// ✅ Doğru
import { renderHook, act } from '@testing-library/react'
import { useAuth } from './useAuth'

describe('useAuth', () => {
  it('should handle login correctly', async () => {
    const { result } = renderHook(() => useAuth())

    await act(async () => {
      await result.current.login({
        email: 'test@example.com',
        password: 'password'
      })
    })

    expect(result.current.user).toBeDefined()
    expect(result.current.isLoading).toBe(false)
  })
})
```

## 📱 Performance

### Memoization

```tsx
// ✅ Doğru
export const UserList = React.memo(({ users }: { users: User[] }) => {
  return (
    <div>
      {users.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </div>
  )
})

// ❌ Yanlış
export const UserList = ({ users }: { users: User[] }) => {
  return (
    <div>
      {users.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </div>
  )
}
```

### Lazy Loading

```tsx
// ✅ Doğru
const AdminPanel = lazy(() => import('./AdminPanel'))

export const App = () => {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <AdminPanel />
    </Suspense>
  )
}

// ❌ Yanlış
import AdminPanel from './AdminPanel'

export const App = () => {
  return <AdminPanel />
}
```

## 🎨 UI/UX Guidelines

### Loading States

```tsx
// ✅ Doğru
export const UserProfile = () => {
  const { user, isLoading, error } = useUser()

  if (isLoading) {
    return <div className="flex items-center justify-center p-8">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
    </div>
  }

  if (error) {
    return <div className="text-red-500 p-4">{error}</div>
  }

  if (!user) {
    return <div className="text-gray-500 p-4">User not found</div>
  }

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold">{user.name}</h1>
      <p className="text-gray-600">{user.email}</p>
    </div>
  )
}
```

### Error Boundaries

```tsx
// ✅ Doğru
export class ErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean }
> {
  constructor(props: { children: React.ReactNode }) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo)
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="p-4 text-center">
          <h2 className="text-xl font-semibold text-red-600">
            Something went wrong
          </h2>
          <button
            onClick={() => this.setState({ hasError: false })}
            className="mt-2 px-4 py-2 bg-blue-500 text-white rounded"
          >
            Try again
          </button>
        </div>
      )
    }

    return this.props.children
  }
}
```

## 📊 Analytics & Monitoring

### Error Tracking

```typescript
// ✅ Doğru
export const logError = (error: Error, context?: Record<string, any>) => {
  console.error('[ERROR]', {
    message: error.message,
    stack: error.stack,
    context,
    timestamp: new Date().toISOString()
  })
  
  // Send to error tracking service
  // Sentry.captureException(error, { extra: context })
}

// ❌ Yanlış
export const logError = (error: any) => {
  console.error(error)
}
```

### Performance Monitoring

```typescript
// ✅ Doğru
export const usePerformanceMonitor = (componentName: string) => {
  useEffect(() => {
    const startTime = performance.now()
    
    return () => {
      const endTime = performance.now()
      console.log(`[PERF] ${componentName} render time: ${endTime - startTime}ms`)
    }
  })
}
```

## 🔧 Development Tools

### VS Code Settings

```json
{
  "typescript.preferences.importModuleSpecifier": "relative",
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "tailwindCSS.includeLanguages": {
    "typescript": "javascript",
    "typescriptreact": "javascript"
  }
}
```

### ESLint Rules

```json
{
  "rules": {
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-unused-vars": "error",
    "react-hooks/exhaustive-deps": "error",
    "react/prop-types": "off"
  }
}
```
